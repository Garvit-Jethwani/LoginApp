// ********RoostGPT********
/*
Test generated by RoostGPT for test shared-connector-test_clone_clone_clone_clone_clone_clone_clone_clone_clone using AI Type  and AI Model 

ROOST_METHOD_HASH=equals_082a9e7881
ROOST_METHOD_SIG_HASH=equals_ded257778a

Based on the provided information and the equals method for the CredentialsObscuredGet200Response class, here are several test scenarios:

Scenario 1: Equal Objects Comparison

Details:
  TestName: equalObjectsComparison
  Description: Verify that two CredentialsObscuredGet200Response objects with the same 'obscured' value are considered equal.
Execution:
  Arrange: Create two CredentialsObscuredGet200Response objects with the same 'obscured' value.
  Act: Compare the two objects using the equals method.
  Assert: Verify that the equals method returns true.
Validation:
  This test ensures that the equals method correctly identifies two objects as equal when they have the same 'obscured' value. It's crucial for maintaining consistency in object comparisons.

Scenario 2: Unequal Objects Comparison

Details:
  TestName: unequalObjectsComparison
  Description: Verify that two CredentialsObscuredGet200Response objects with different 'obscured' values are not considered equal.
Execution:
  Arrange: Create two CredentialsObscuredGet200Response objects with different 'obscured' values.
  Act: Compare the two objects using the equals method.
  Assert: Verify that the equals method returns false.
Validation:
  This test ensures that the equals method correctly identifies two objects as unequal when they have different 'obscured' values, which is essential for proper object distinction.

Scenario 3: Null Object Comparison

Details:
  TestName: nullObjectComparison
  Description: Verify that comparing a CredentialsObscuredGet200Response object with null returns false.
Execution:
  Arrange: Create a CredentialsObscuredGet200Response object.
  Act: Compare the object with null using the equals method.
  Assert: Verify that the equals method returns false.
Validation:
  This test ensures that the equals method handles null comparisons correctly, which is important for preventing null pointer exceptions and maintaining robust equality checks.

Scenario 4: Same Object Comparison

Details:
  TestName: sameObjectComparison
  Description: Verify that comparing a CredentialsObscuredGet200Response object with itself returns true.
Execution:
  Arrange: Create a CredentialsObscuredGet200Response object.
  Act: Compare the object with itself using the equals method.
  Assert: Verify that the equals method returns true.
Validation:
  This test ensures that the equals method correctly identifies an object as equal to itself, which is a fundamental property of equality in object-oriented programming.

Scenario 5: Different Class Object Comparison

Details:
  TestName: differentClassComparison
  Description: Verify that comparing a CredentialsObscuredGet200Response object with an object of a different class returns false.
Execution:
  Arrange: Create a CredentialsObscuredGet200Response object and an object of a different class.
  Act: Compare the CredentialsObscuredGet200Response object with the other object using the equals method.
  Assert: Verify that the equals method returns false.
Validation:
  This test ensures that the equals method correctly handles comparisons with objects of different classes, which is important for maintaining type safety in equality checks.

Scenario 6: Null Obscured Value Comparison

Details:
  TestName: nullObscuredValueComparison
  Description: Verify that two CredentialsObscuredGet200Response objects with null 'obscured' values are considered equal.
Execution:
  Arrange: Create two CredentialsObscuredGet200Response objects with null 'obscured' values.
  Act: Compare the two objects using the equals method.
  Assert: Verify that the equals method returns true.
Validation:
  This test ensures that the equals method correctly handles comparisons when the 'obscured' field is null, which is important for proper null value handling in equality checks.

These scenarios cover various aspects of the equals method, including positive and negative cases, null handling, and type safety. They aim to thoroughly test the implementation of the equals method in the CredentialsObscuredGet200Response class.
*/

// ********RoostGPT********

package org.openapitools.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CredentialsObscuredGet200ResponseEqualsTest {
    private CredentialsObscuredGet200Response response1;
    private CredentialsObscuredGet200Response response2;
    @BeforeEach
    void setUp() {
        response1 = new CredentialsObscuredGet200Response();
        response2 = new CredentialsObscuredGet200Response();
    }
    @Test
    @Tag("valid")
    void equalObjectsComparison() {
        response1.setObscured(true);
        response2.setObscured(true);
        assertTrue(response1.equals(response2));
    }
    @Test
    @Tag("valid")
    void unequalObjectsComparison() {
        response1.setObscured(true);
        response2.setObscured(false);
        assertFalse(response1.equals(response2));
    }
    @Test
    @Tag("boundary")
    void nullObjectComparison() {
        assertFalse(response1.equals(null));
    }
    @Test
    @Tag("valid")
    void sameObjectComparison() {
        assertTrue(response1.equals(response1));
    }
    @Test
    @Tag("invalid")
    void differentClassComparison() {
        Object differentObject = new Object();
        assertFalse(response1.equals(differentObject));
    }
    @Test
    @Tag("boundary")
    void nullObscuredValueComparison() {
        response1.setObscured(null);
        response2.setObscured(null);
        assertTrue(response1.equals(response2));
    }
}