// ********RoostGPT********
/*
Test generated by RoostGPT for test shared-connector-test_clone_clone_clone_clone_clone_clone_clone_clone_clone using AI Type  and AI Model 

ROOST_METHOD_HASH=equals_c359bb3fac
ROOST_METHOD_SIG_HASH=equals_ded257778a

Based on the provided information and the equals method of the LoginButtonStatusGet200Response class, here are several test scenarios:

Scenario 1: Equal Objects with Same Status

Details:
  TestName: equalObjectsWithSameStatus
  Description: Verify that two LoginButtonStatusGet200Response objects with the same status are considered equal.
Execution:
  Arrange: Create two LoginButtonStatusGet200Response objects with the same status.
  Act: Call the equals method on one object, passing the other as an argument.
  Assert: Verify that the equals method returns true.
Validation:
  This test ensures that the equals method correctly identifies two objects as equal when they have the same status. It's crucial for maintaining consistency in comparisons and collections.

Scenario 2: Unequal Objects with Different Status

Details:
  TestName: unequalObjectsWithDifferentStatus
  Description: Verify that two LoginButtonStatusGet200Response objects with different status values are not considered equal.
Execution:
  Arrange: Create two LoginButtonStatusGet200Response objects with different status values.
  Act: Call the equals method on one object, passing the other as an argument.
  Assert: Verify that the equals method returns false.
Validation:
  This test ensures that the equals method correctly differentiates between objects with different status values, which is essential for proper object comparison and set operations.

Scenario 3: Object Equality with Null

Details:
  TestName: objectEqualityWithNull
  Description: Verify that a LoginButtonStatusGet200Response object is not equal to null.
Execution:
  Arrange: Create a LoginButtonStatusGet200Response object.
  Act: Call the equals method on the object, passing null as an argument.
  Assert: Verify that the equals method returns false.
Validation:
  This test checks the null handling in the equals method, which is crucial for preventing null pointer exceptions and ensuring robust equality comparisons.

Scenario 4: Object Equality with Different Class

Details:
  TestName: objectEqualityWithDifferentClass
  Description: Verify that a LoginButtonStatusGet200Response object is not equal to an object of a different class.
Execution:
  Arrange: Create a LoginButtonStatusGet200Response object and an object of a different class (e.g., String).
  Act: Call the equals method on the LoginButtonStatusGet200Response object, passing the other object as an argument.
  Assert: Verify that the equals method returns false.
Validation:
  This test ensures that the equals method correctly handles comparisons with objects of different classes, which is important for type safety and preventing unexpected behavior in collections.

Scenario 5: Object Equality with Null Status

Details:
  TestName: objectEqualityWithNullStatus
  Description: Verify that two LoginButtonStatusGet200Response objects are equal when both have null status.
Execution:
  Arrange: Create two LoginButtonStatusGet200Response objects with null status.
  Act: Call the equals method on one object, passing the other as an argument.
  Assert: Verify that the equals method returns true.
Validation:
  This test checks the handling of null status values in the equals method, ensuring consistent behavior when dealing with unset or null properties.

Scenario 6: Self Equality

Details:
  TestName: selfEquality
  Description: Verify that a LoginButtonStatusGet200Response object is equal to itself.
Execution:
  Arrange: Create a LoginButtonStatusGet200Response object.
  Act: Call the equals method on the object, passing itself as an argument.
  Assert: Verify that the equals method returns true.
Validation:
  This test ensures that the equals method correctly handles self-comparison, which is a fundamental property of equality and important for consistency in various operations.

These scenarios cover various aspects of the equals method, including normal cases, edge cases, and error handling, providing a comprehensive test suite for the method.
*/

// ********RoostGPT********

package org.openapitools.model;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LoginButtonStatusGet200ResponseEqualsTest {
    private LoginButtonStatusGet200Response response1;
    private LoginButtonStatusGet200Response response2;
    @BeforeEach
    void setUp() {
        response1 = new LoginButtonStatusGet200Response();
        response2 = new LoginButtonStatusGet200Response();
    }
    @Test
    @Tag("valid")
    void equalObjectsWithSameStatus() {
        response1.setStatus("active");
        response2.setStatus("active");
        assertTrue(response1.equals(response2));
    }
    @Test
    @Tag("valid")
    void unequalObjectsWithDifferentStatus() {
        response1.setStatus("active");
        response2.setStatus("inactive");
        assertFalse(response1.equals(response2));
    }
    @Test
    @Tag("boundary")
    void objectEqualityWithNull() {
        assertFalse(response1.equals(null));
    }
    @Test
    @Tag("boundary")
    void objectEqualityWithDifferentClass() {
        assertFalse(response1.equals("Not a LoginButtonStatusGet200Response"));
    }
    @Test
    @Tag("boundary")
    void objectEqualityWithNullStatus() {
        assertTrue(response1.equals(response2));
    }
    @Test
    @Tag("valid")
    void selfEquality() {
        assertTrue(response1.equals(response1));
    }
    @Test
    @Tag("valid")
    void equalityWithOneNullStatus() {
        response1.setStatus("active");
        assertFalse(response1.equals(response2));
    }
    @Test
    @Tag("valid")
    void equalityWithBothNonNullDifferentStatus() {
        response1.setStatus("active");
        response2.setStatus("inactive");
        assertFalse(response1.equals(response2));
    }
    @Test
    @Tag("boundary")
    void equalityWithEmptyStatus() {
        response1.setStatus("");
        response2.setStatus("");
        assertTrue(response1.equals(response2));
    }
    @Test
    @Tag("boundary")
    void equalityWithNullAndEmptyStatus() {
        response1.setStatus(null);
        response2.setStatus("");
        assertFalse(response1.equals(response2));
    }
}