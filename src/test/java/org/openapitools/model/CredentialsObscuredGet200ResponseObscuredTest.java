// ********RoostGPT********
/*
Test generated by RoostGPT for test shared-connector-test_clone_clone_clone_clone_clone_clone_clone_clone_clone using AI Type  and AI Model 

ROOST_METHOD_HASH=obscured_4ae41e6cc1
ROOST_METHOD_SIG_HASH=obscured_5bb44ad197

Based on the provided information and constraints, here are the test scenarios for the `obscured` method in the `CredentialsObscuredGet200Response` class:

```
Scenario 1: Set Obscured to True

Details:
  TestName: setObscuredToTrue
  Description: Verify that the obscured method correctly sets the obscured field to true and returns the instance of CredentialsObscuredGet200Response.

Execution:
  Arrange: Create a new instance of CredentialsObscuredGet200Response.
  Act: Call the obscured method with a parameter value of true.
  Assert: 
    - Check if the returned object is the same instance of CredentialsObscuredGet200Response.
    - Verify that getObscured() returns true.

Validation:
  This test ensures that the obscured method correctly sets the obscured field to true and maintains the fluent interface pattern by returning the same instance. It's important to verify both the return value and the internal state change.

Scenario 2: Set Obscured to False

Details:
  TestName: setObscuredToFalse
  Description: Verify that the obscured method correctly sets the obscured field to false and returns the instance of CredentialsObscuredGet200Response.

Execution:
  Arrange: Create a new instance of CredentialsObscuredGet200Response.
  Act: Call the obscured method with a parameter value of false.
  Assert: 
    - Check if the returned object is the same instance of CredentialsObscuredGet200Response.
    - Verify that getObscured() returns false.

Validation:
  This test ensures that the obscured method correctly sets the obscured field to false and maintains the fluent interface pattern. It's crucial to test both true and false cases to ensure proper boolean handling.

Scenario 3: Set Obscured to Null

Details:
  TestName: setObscuredToNull
  Description: Verify that the obscured method correctly handles a null input and sets the obscured field to null.

Execution:
  Arrange: Create a new instance of CredentialsObscuredGet200Response.
  Act: Call the obscured method with a parameter value of null.
  Assert: 
    - Check if the returned object is the same instance of CredentialsObscuredGet200Response.
    - Verify that getObscured() returns null.

Validation:
  This test verifies the method's ability to handle null inputs, which is important for robustness. It ensures that the method doesn't throw an exception and correctly sets the field to null when given a null input.

Scenario 4: Chained Calls to Obscured Method

Details:
  TestName: chainedCallsToObscured
  Description: Verify that multiple chained calls to the obscured method work correctly, with the last call determining the final value.

Execution:
  Arrange: Create a new instance of CredentialsObscuredGet200Response.
  Act: Chain multiple calls to the obscured method with different boolean values.
  Assert: 
    - Verify that the final call's value is reflected in getObscured().
    - Check if the returned object from the final call is the same instance of CredentialsObscuredGet200Response.

Validation:
  This test ensures that the fluent interface works correctly with multiple chained calls, and that the last call's value is the one that persists. This is important for verifying the method's behavior in more complex usage scenarios.

Scenario 5: Verify Equality After Setting Obscured

Details:
  TestName: verifyEqualityAfterSettingObscured
  Description: Verify that two CredentialsObscuredGet200Response objects with the same obscured value are considered equal.

Execution:
  Arrange: Create two instances of CredentialsObscuredGet200Response.
  Act: Set the same obscured value on both instances using the obscured method.
  Assert: 
    - Use the equals method to verify that the two instances are considered equal.
    - Verify that their hashCode values are the same.

Validation:
  This test ensures that the obscured method correctly influences the equality and hash code of the object, which is crucial for proper functioning in collections and comparisons.
```

These test scenarios cover the main functionality of the `obscured` method, including setting different boolean values, handling null, chained calls, and its impact on object equality. They adhere to the constraints of using only the provided methods and fields.
*/

// ********RoostGPT********

package org.openapitools.model;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CredentialsObscuredGet200ResponseObscuredTest {
    @Test
    @Tag("valid")
    void setObscuredToTrue() {
        CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
        CredentialsObscuredGet200Response result = response.obscured(true);
        assertSame(response, result);
        assertTrue(result.getObscured());
    }
    @Test
    @Tag("valid")
    void setObscuredToFalse() {
        CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
        CredentialsObscuredGet200Response result = response.obscured(false);
        assertSame(response, result);
        assertFalse(result.getObscured());
    }
    @Test
    @Tag("boundary")
    void setObscuredToNull() {
        CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
        CredentialsObscuredGet200Response result = response.obscured(null);
        assertSame(response, result);
        assertNull(result.getObscured());
    }
    @Test
    @Tag("valid")
    void chainedCallsToObscured() {
        CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
        CredentialsObscuredGet200Response result = response.obscured(true).obscured(false).obscured(true);
        assertSame(response, result);
        assertTrue(result.getObscured());
    }
    @Test
    @Tag("valid")
    void verifyEqualityAfterSettingObscured() {
        CredentialsObscuredGet200Response response1 = new CredentialsObscuredGet200Response().obscured(true);
        CredentialsObscuredGet200Response response2 = new CredentialsObscuredGet200Response().obscured(true);
        assertEquals(response1, response2);
        assertEquals(response1.hashCode(), response2.hashCode());
    }
}