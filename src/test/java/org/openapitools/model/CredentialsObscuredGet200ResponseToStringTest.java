// ********RoostGPT********
/*
Test generated by RoostGPT for test shared-connector-test_clone_clone_clone_clone_clone_clone_clone_clone_clone using AI Type  and AI Model 

ROOST_METHOD_HASH=toString_3eeb15b3bc
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

Based on the provided information, here are some test scenarios for the toString() method of the CredentialsObscuredGet200Response class:

Scenario 1: Test toString() with obscured set to true

Details:
  TestName: toStringWithObscuredTrue
  Description: Verify that the toString() method correctly represents the object when the obscured field is set to true.

Execution:
  Arrange: Create a CredentialsObscuredGet200Response object and set obscured to true.
  Act: Call the toString() method on the object.
  Assert: Check if the returned string contains the expected representation.

Validation:
  This test ensures that the toString() method correctly formats the object's state when obscured is true. It's important for debugging and logging purposes to have an accurate string representation of the object.

Scenario 2: Test toString() with obscured set to false

Details:
  TestName: toStringWithObscuredFalse
  Description: Verify that the toString() method correctly represents the object when the obscured field is set to false.

Execution:
  Arrange: Create a CredentialsObscuredGet200Response object and set obscured to false.
  Act: Call the toString() method on the object.
  Assert: Check if the returned string contains the expected representation.

Validation:
  This test ensures that the toString() method correctly formats the object's state when obscured is false. It's crucial to verify different states of the object are correctly represented.

Scenario 3: Test toString() with obscured set to null

Details:
  TestName: toStringWithObscuredNull
  Description: Verify that the toString() method correctly handles the case when the obscured field is null.

Execution:
  Arrange: Create a CredentialsObscuredGet200Response object without setting the obscured field (it will be null by default).
  Act: Call the toString() method on the object.
  Assert: Check if the returned string contains the expected representation with null for obscured.

Validation:
  This test verifies that the toString() method can handle null values for the obscured field, which is important for robustness and preventing NullPointerExceptions.

Scenario 4: Test toString() indentation

Details:
  TestName: toStringIndentation
  Description: Verify that the toString() method correctly indents the output string.

Execution:
  Arrange: Create a CredentialsObscuredGet200Response object with any value for obscured.
  Act: Call the toString() method on the object.
  Assert: Check if the returned string has the correct indentation (4 spaces) for the obscured field.

Validation:
  This test ensures that the toString() method correctly formats the output with proper indentation, which is important for readability when logging or debugging.

Scenario 5: Test toString() class name representation

Details:
  TestName: toStringClassNameRepresentation
  Description: Verify that the toString() method correctly includes the class name in the output.

Execution:
  Arrange: Create a CredentialsObscuredGet200Response object.
  Act: Call the toString() method on the object.
  Assert: Check if the returned string starts with "class CredentialsObscuredGet200Response {".

Validation:
  This test ensures that the toString() method correctly identifies the class name in its output, which is crucial for proper object identification in logs or debug output.

These test scenarios cover various aspects of the toString() method, including different states of the obscured field, null handling, formatting, and class name representation. They aim to ensure the method works correctly under different conditions and produces the expected output.
*/

// ********RoostGPT********

package org.openapitools.model;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CredentialsObscuredGet200ResponseToStringTest {
    @Test
    @Tag("valid")
    void toStringWithObscuredTrue() {
        CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response().obscured(true);
        String result = response.toString();
        assertTrue(result.contains("class CredentialsObscuredGet200Response {"));
        assertTrue(result.contains("obscured: true"));
    }
    @Test
    @Tag("valid")
    void toStringWithObscuredFalse() {
        CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response().obscured(false);
        String result = response.toString();
        assertTrue(result.contains("class CredentialsObscuredGet200Response {"));
        assertTrue(result.contains("obscured: false"));
    }
    @Test
    @Tag("boundary")
    void toStringWithObscuredNull() {
        CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
        String result = response.toString();
        assertTrue(result.contains("class CredentialsObscuredGet200Response {"));
        assertTrue(result.contains("obscured: null"));
    }
    @Test
    @Tag("valid")
    void toStringIndentation() {
        CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response().obscured(true);
        String result = response.toString();
        assertTrue(result.contains("\n    obscured: true"));
    }
    @Test
    @Tag("valid")
    void toStringClassNameRepresentation() {
        CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
        String result = response.toString();
        assertTrue(result.startsWith("class CredentialsObscuredGet200Response {"));
    }
}