// ********RoostGPT********
/*
Application Test generated by RoostGPT for test ApplicationTest using AI Type Open AI and AI Model gpt-4-turbo


*/

// ********RoostGPT********
package org.openapitools.api;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;
import static org.hamcrest.Matchers.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

@ExtendWith(SpringExtension.class)
@SpringBootTest
@AutoConfigureMockMvc
public class ApplicationTest {

	@Autowired
	private MockMvc mockMvc;

	@Test
	public void testAccessibilityEndpoint() throws Exception {
		mockMvc.perform(get("/accessibility")).andExpect(status().isOk()).andExpect(jsonPath("$", is("Accessible!")));
	}

	@Test
	public void testBrowserCompatibilityEndpoint() throws Exception {
		mockMvc.perform(get("/browser-compatibility"))
			.andExpect(status().isOk())
			.andExpect(jsonPath("$", is("Compatible!")));
	}

	@Test
	public void testCredentialsObscuredEndpoint() throws Exception {
		mockMvc.perform(get("/credentials-obscured"))
			.andExpect(status().isOk())
			.andExpect(jsonPath("$.obscured", is(true)));
	}

	@Test
	public void testLoginEndpoint() throws Exception {
		mockMvc
			.perform(post("/login").contentType(MediaType.APPLICATION_JSON)
				.content("{\"username\":\"user\",\"password\":\"pass\"}"))
			.andExpect(status().isOk())
			.andExpect(jsonPath("$.status", is("Success")));
	}

	@Test
	public void testLoginButtonClickEndpoint() throws Exception {
		mockMvc.perform(post("/login/button-click")).andExpect(status().isOk()).andExpect(content().string("Clicked!"));
	}

	@Test
	public void testLoginButtonStatusEndpoint() throws Exception {
		mockMvc.perform(get("/login/button-status"))
			.andExpect(status().isOk())
			.andExpect(jsonPath("$.enabled", is(true)));
	}

	@Test
	public void testLoginPageLoadEndpoint() throws Exception {
		mockMvc.perform(get("/login/page-load")).andExpect(status().isOk()).andExpect(content().string("Loaded!"));
	}

	@Test
	public void testPasswordEndpoint() throws Exception {
		mockMvc
			.perform(
					post("/password").contentType(MediaType.APPLICATION_JSON).content("{\"password\":\"newpassword\"}"))
			.andExpect(status().isOk())
			.andExpect(jsonPath("$.updated", is(true)));
	}

	@Test
	public void testUsernameEndpoint() throws Exception {
		mockMvc.perform(post("/username").contentType(MediaType.APPLICATION_JSON).content("{\"username\":\"newuser\"}"))
			.andExpect(status().isOk())
			.andExpect(jsonPath("$.updated", is(true)));
	}

	@Test
	public void testViewportEndpoint() throws Exception {
		mockMvc.perform(get("/viewport")).andExpect(status().isOk()).andExpect(jsonPath("$", is("Viewport set!")));
	}

}
